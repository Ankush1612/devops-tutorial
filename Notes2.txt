-> Data Structure is a way of collecting and organising data in such a way
that we can perform operation on these data in an effective way.

-> String name = "Ankush" ;
   int age = 22 ;
   
-> class Student{
   
      String name = "Ankush" ;
	  int age = 22 ;
	  boolean isTopper = false ;
	  
   }
   
Different Type of Data Structure :
---------------------------------------
Array
Stack
Linked List
Queue
Graph 
Tree
----------------------------------------
Characteristics of DS :
---------------------------
1. Linear -> In Linear DS, the data items are arranged in linear sequence.
                 Example : Array
				 
2. Non-Linear -> In Non-Linear DS, the data items are not in sequence.
                  Example : Tree, Graph
				  
3. Homogeneous -> In Homogeneous DS, all the data items are of same type.
                  Example : Array
				  
4. Non-Homogeneous ->In Non-Homogeneous DS, the elements may or may not be of the same type.
                 Example : Class

5. Static -> In static data structure, Size are fixed and we cannot change at runtime.
                  Example : Array
			
6. Dynamic -> In Dynamic DS, its growable or shrinkable at the runtime..
                 Example: LinkedList..
				 
---------------------------------------------------------------------
Algorithm:
============
-> An Algorithm is a finite set of instructions or logic, written in order to accomplish a certain task.
-> Every Algorithm must satisfy the following properties:

1. Input:
-----------
There should be 0 or more input supplied externally to the algorithm.

2. Output:
------------
There should be atleast 1 output obtained.

3. Finiteness:
--------------
The algorithm should have finite number of steps.

4. Definiteness:
----------------
Every step of the algorithm should clear and well defined.

5. Correctness:
-----------------
Every step of the algorithm must generate a correct output.

----------------------------------------------------------------------------------------------
An algorithm is said to be efficient and fast, if it takes less time to excute and consumes less memory space
-> the performance of an algorithm is measured on the basis of the following properties :

1. Time Complexity
2. Space Complexity

===========================================
Space Complexity:
-------------------
-> Its the amount of memory space required by the algorithm.
-> An algorithm generally requires space for following components:

1. Instruction space:
---------------------
-> Its the space required to store the executable version of the program. The space is fixed, 
   but varies depending upon the number of lines
   
2. Data Space:
-----------------
-> Its the space required to store all the constants and variables value.

3. Environment Space:
-----------------------
-> Its the space required to store environment information needed to resume
   the suspended function.
   
void f1(){ // when this function is invoked, x will be stored in stack

   int x = 10 ;
   
   f2() ;
   System.out.println(x) ;
}

void f2(){
   SOP("Hello") ;
}


-----------------------------------------------
Calculation of Space Complexity:
=====================================
Size of int in Java : 4 bytes
void addition(){

    int z = a + b + c ;// (4 + 4 + 4 + 4 ) => 16
	return z ; // 4

}
Constant Space Complexity
Total => 20 Bytes
So for the above algorithm it takes 20 bytes...

----------------------------------
// n = 5

int sum(int a[], int n){

     int x = 0 ;
	 
	 for(int i = 0 ; i < n ; i++){
	        x = x + a[i] ;
	 }
	 
	 return x ;
}

Space COmplexity : space of array only = 4 * n => 20
                    Extra Space = n + x + i + return => 16
					        TOTAL SPACE => 36

=> (4*n) + 16 
  
The above one is example of linear space complexity
=======================================

Time Complexity :
===================

For any defined problem we can have n number of solutions. It's a true thing because in life
everyone have the same problem and situations. Somebody chooses different and others with different 
approaches. But not all the solutions are not good or efficient solutions. So same for the algortihms 
also. Which one to choose when and which to not..


-> Time complexity of an algorithm signifies the total time required by the program  to run till its completion.

The time complexity of an algorithm is most common estimated 
by counting the number of elementary steps performed by the algorithm

-> The most common metric of calculating time complexity is Big O Notation

->
a) Big O (upper bound, this algorithm takes maximum this time )
b) Big Omega (lower bound, what is the minimum time it is taking)
c) Big Thetha (upper and lower bound, talks about both)



Example:
------------
Problem: Take a number as input, and return square of the number as output

Solution1:
------------// O(n)
int SquareIt(int n){
     
	 int output = 0 ;
	 
	 for(int i = 1 ; i <= n ; i++){
	    
		output = output + n ;
	 }
	 
	 return output ;
}

// Solution 2: O(1)
int squareItNew(int n){

    return n*n ;
}

Calculation of Time Complexity:
================================

1) Constant time complexity:[O(1)]
--------------------------------
    statement ;
	
	-> this will have constant time complexity

2) Linear time complexity:[O(n)]
--------------------------
		  for( int i = 1 ; i <= n ; i++){
		  
		          statement ;
		  } 
		  
3) Quadratic time complexity: [O(n^2)]
-----------------------------
          for(int i = 0 ; i < n ; i++){
		  
		       for(int j = 1 ; j < n ; j++){
			       statement ;
			   }
		  }
		  
4) Logarithmic Time Complexity: [O(log(n))]
-------------------------------
          while(low <= high){
		        mid = (low + high)/2 ;
				
				if(target < arr[mid]){
				       high = mid - 1 ;
					   
			    }
				else if(target > arr[mid]){
				       low = mid + 1 ;
				}
				else{
				        break ;
			    }
		  }
		  
****running time of algorithm is proportional to number of times n can be divided by 2.
    this is because algorithm divides the working area in half of each iteration
	
	for each iteratioin it will divide the thing into the half that's why it is a logarithmic expression
	
=====================================================================================================================
	1. What is the time complexity of the following code:
	int a = 0 ;
	for ( i = 0 ; i < N ; i++){
	     for(j = N ; j > i ; j++){
		      a = a + i + j ;
		 }
	}
	
	a. O(N)
	b. O(N*log(N))
	c. O(N*sqrt(N))
	d. O(N*N)
	
	2) What does it mean when we say that an algorithm X is asymptotically more efficient
	than Y 
	
	a. X will be a better choice for small inputs
	b. X will be a better choice for large inputs
	c. Y will always be a better choice for small inputs.
	d. X will always be a better choice for all inputs.
	
	Select the appropriate code snippet to insert a node in the beginning of the list.
a.) public class insertFront(int data)
{
Node node = new Node(data, head, head.getNext());
node.getNext().setPrev(node);
head.setNext(node.getNext());
size++;
}
b.) public class insertFront(int data)
{
Node node = new Node(data, head, head.getNext());
node.getNext().setPrev(head);
head.setNext(node);
size++;
}
c.) public class insertFront(int data)
{
Node node = new Node(data, head, head);
node.getNext().setPrev(node);
head.setNext(node);
size++;
}
d.) public class insertFront(int data)
{
Node node = new Node(data, head, head.getNext());
node.getNext().setPrev(node);
head.setNext(node);
size++;
}

-------------------------------------------------------------------------
Searching:
-----------------
To search an element in a given array, we have two popular algorithms available

1. Liner Searching
2. Binary Searching

Linear Search:
===============
-> Linear search is a very basic and simple algorithm.
-> In Linear search, we serch an element or value in a given array by traversing the
   array from starting tll desried element or value is found.
   
-> Linear search is applied on unsorted or unordered lists/arrays.

Features of Linear search algorithm:
------------------------------------
1. It is used for unsorted and unordered small list of elements.
2. It has time complexity of O(n), which means the time isi 
   linearly dependent on the number of elements, which is not bad, but not not that good too.
3. It has a very simple implementation.
  
